import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from datetime import datetime
import pytz
import os.path
import uuid

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

# Data structures
banned_users = set()
user_contacting_admin = {}
username_to_id = {}  # username: user_id
awaiting_admin_reply = set()
user_orders = {}
chat_logs = {}
message_ids = {}  # user_id: [message_ids]
unanswered_clients = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç–≤–µ—Ç–∞

# Create directories
os.makedirs('chat_logs', exist_ok=True)
os.makedirs('chat_logs/photos', exist_ok=True)


class OrderState(StatesGroup):
    waiting_for_product = State()
    waiting_for_quantity = State()
    waiting_for_quality = State()
    confirming_order = State()
    waiting_for_comment = State()


class RulesState(StatesGroup):
    waiting_for_accept = State()


# Products and photos configuration
PRODUCTS = {
    "–ú–µ—Ñ–µ–¥—Ä–æ–Ω": {1: 2790, 2: 4790, 3: 5990},
    "–ú–∞—Ä–∏—Ö—É–∞–Ω–∞": {1: 1690, 2: 1990, 3: 2490},
    "–ê–º—Ñ–µ—Ç–∞–º–∏–Ω": {1: 1290, 2: 2190, 3: 2990},
}

PHOTOS = {
    "–ú–µ—Ñ–µ–¥—Ä–æ–Ω": "data/photos/fedya.jpg",
    "–ú–∞—Ä–∏—Ö—É–∞–Ω–∞": "data/photos/boby.jpg",
    "–ê–º—Ñ–µ—Ç–∞–º–∏–Ω": "data/photos/metall.jpg",
}

# Rules text
RULES_TEXT = """
üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ @ElysiumOneBot</b>

1. <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> - –ª–∏—Ü–æ, –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–µ –±–æ—Ç–∞ @ElysiumOneBot —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

2. –ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ @ElysiumOneBot, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ.

3. –î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç @ElysiumOneBot —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram API.

4. –°–æ–≤–µ—Ä—à–∞—è –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏/–∏–ª–∏ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏/–∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —ç—Ç–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ @ElysiumOneBot, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–µ –Ω—É–∂–¥—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ @ElysiumOneBot –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.

5. –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ç–µ–∫—Å—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏—è), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –≤ —á–∞—Ç–µ —Å @ElysiumOneBot —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, —è–≤–ª—è–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∏–ª–∏ –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º. –õ—é–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã –∏ –Ω–µ–ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã.

6. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è @ElysiumOneBot —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –≤–µ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ü–µ–ª–µ–π –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.

7. –ü–µ—Ä–µ—Ö–æ–¥—è –ø–æ –ª—é–±—ã–º —Å—Å—ã–ª–∫–∞–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º @ElysiumOneBot, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å–µ–±—è.

8. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ @ElysiumOneBot –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

9. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ @ElysiumOneBot, —è–≤–ª—è—é—Ç—Å—è –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–º–∏.

10. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.

11. –í—Å–µ —Ç–æ–≤–∞—Ä—ã, —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –±–æ—Ç–µ, —è–≤–ª—è—é—Ç—Å—è –≤—ã–º—ã—Å–ª–æ–º. –†–µ–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.

12. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —Ç–µ–º, —á—Ç–æ –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≤–µ—Ä—à–∞—é—Ç—Å—è –∏–º –Ω–∞ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∏—Å–∫.

13. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.

14. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏ –ø—Ä–∞–≤–∏–ª.

15. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
"""

# Keyboards
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
main_kb.add("üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞", "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")

back_kb = ReplyKeyboardMarkup(resize_keyboard=True)
back_kb.add("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")

rules_kb = ReplyKeyboardMarkup(resize_keyboard=True)
rules_kb.add(KeyboardButton("‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é"))
rules_kb.add(KeyboardButton("üìÑ –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"))


def format_welcome():
    return f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω Elysium One ‚Äî –≥–¥–µ –∫–∞–∂–¥—ã–π –≥—Ä–∞–º–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º.
üç¨ –ù–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤:

<b>–ú–∞—Ä–∏—Ö—É–∞–Ω–∞</b>
1–≥ ‚Äî 1 690‚ÇΩ
2–≥ ‚Äî 1 990‚ÇΩ 
3–≥ ‚Äî 2 490‚ÇΩ 

<b>–ú–µ—Ñ–µ–¥—Ä–æ–Ω</b>
1–≥ ‚Äî 2 790‚ÇΩ
2–≥ ‚Äî 4 790‚ÇΩ 
3–≥ ‚Äî 5 990‚ÇΩ

<b>–ê–º—Ñ–µ—Ç–∞–º–∏–Ω</b>
1–≥ ‚Äî 1 290‚ÇΩ
2–≥ ‚Äî 2 190‚ÇΩ 
3–≥ ‚Äî 2 990‚ÇΩ 

üéØ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ–±–∞–≤–∏–≤ –≤—Å–µ–≥–æ 10% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.

–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –≥—Ä–∞–º–º–æ–≤–∫–∏ ‚Äî –º—ã –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å.

üìç –°–µ–π—á–∞—Å —à–æ–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –º–Ω–æ–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏, –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –ø—Ä–∏ –∑–∞–∫–∞–∑–µ.

üìÖ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {get_time_stamp()} (–ø–æ –ú–°–ö)
üîí –í—Å–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞.
üöÄ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∫–ª–∞–¥ —É–∂–µ –∂–¥—ë—Ç –í–∞—Å –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.
–í–∞—à <b>Elysium One</b> ‚Äî –≥–¥–µ —Å–ª–∞–¥–æ—Å—Ç–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–º.
"""


def get_time_stamp():
    msk_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(msk_tz)
    rounded = now.replace(minute=0 if now.minute < 30 else 30, second=0, microsecond=0)
    return rounded.strftime("%d.%m.%Y –≤ %H:%M")


async def save_photo(photo: types.PhotoSize, user_id: int) -> str:
    file_ext = photo.file_unique_id[-4:]
    filename = f"{user_id}_{uuid.uuid4().hex[:8]}_{file_ext}.jpg"
    file_path = f"chat_logs/photos/{filename}"
    await photo.download(destination_file=file_path)
    return filename


def log_message(user_id: int, message: str, is_admin: bool = False, is_photo: bool = False):
    if user_id not in chat_logs:
        chat_logs[user_id] = []

    if is_admin and is_photo:
        return

    timestamp = datetime.now().strftime("%d.%m.%y %H:%M:%S")
    username = "admin" if is_admin else f"{username_to_id.get(f'@{user_id}', 'user')}({user_id})"

    if is_photo:
        log_entry = f"{timestamp} @{username}: [—Ñ–æ—Ç–æ_{message}]"
    else:
        log_entry = f"{timestamp} @{username}: {message}"

    chat_logs[user_id].append(log_entry)

    filename = f"chat_logs/user_{user_id}.txt"
    try:
        with open(filename, 'a', encoding='utf-8') as f:
            f.write(log_entry + "\n")
    except Exception as e:
        logging.error(f"Error saving chat log: {e}")


def load_chat_logs(user_id: int):
    filename = f"chat_logs/user_{user_id}.txt"
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return f.read().splitlines()
        except Exception as e:
            logging.error(f"Error loading chat log: {e}")
    return []


async def delete_user_messages(user_id: int):
    try:
        if user_id in message_ids:
            for msg_id in message_ids[user_id]:
                try:
                    await bot.delete_message(chat_id=user_id, message_id=msg_id)
                except Exception as e:
                    logging.error(f"Error deleting message {msg_id}: {e}")
            message_ids[user_id] = []
    except Exception as e:
        logging.error(f"Error deleting messages: {e}")


async def resolve_user(target: str):
    if target.startswith("@"):
        user_id = username_to_id.get(target)
        if not user_id:
            return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return user_id, None
    try:
        return int(target), None
    except ValueError:
        return None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"


async def check_banned(user_id: int):
    if user_id in banned_users:
        return True
    return False


def update_unanswered_clients(user_id: int, is_admin_reply: bool = False):
    if is_admin_reply:
        unanswered_clients.discard(user_id)
    else:
        unanswered_clients.add(user_id)


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if await check_banned(message.from_user.id):
        return

    if message.from_user.username:
        username_to_id[f"@{message.from_user.username}"] = message.from_user.id

    log_message(message.from_user.id, "/start")

    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=main_kb)
        return

    await message.answer("üîí –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞",
                         reply_markup=rules_kb)
    await RulesState.waiting_for_accept.set()


@dp.message_handler(lambda m: m.text == "üìÑ –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", state="*")
async def show_rules(message: types.Message):
    await message.answer(RULES_TEXT, parse_mode='HTML')


@dp.message_handler(lambda m: m.text == "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", state=RulesState.waiting_for_accept)
async def accept_rules(message: types.Message, state: FSMContext):
    log_message(message.from_user.id, "–ü—Ä–∏–Ω—è–ª –ø—Ä–∞–≤–∏–ª–∞")
    await state.finish()
    await message.answer(format_welcome(), reply_markup=main_kb)


@dp.message_handler(commands=['–∫–ª–∏–µ–Ω—Ç—ã'])
async def show_unanswered_clients(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    if not unanswered_clients:
        await message.reply("–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return

    clients_list = []
    for user_id in unanswered_clients:
        username = username_to_id.get(f"@{user_id}", f"ID:{user_id}")
        clients_list.append(f"üë§ {username}")

    response = "üìã –°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n" + "\n".join(clients_list)
    await message.reply(response)


@dp.message_handler(commands=['—Ñ–æ—Ç–æ'])
async def send_photo_from_logs(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /—Ñ–æ—Ç–æ id_—Ñ–æ—Ç–æ")
        return

    photo_id = parts[1]
    photo_path = f"chat_logs/photos/{photo_id}"

    if os.path.exists(photo_path):
        try:
            await message.reply_photo(InputFile(photo_path))
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
    else:
        await message.reply("‚ùó –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")


@dp.message_handler(commands=['ban'])
async def ban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban @username –∏–ª–∏ /ban user_id")
        return

    user_id, error = await resolve_user(parts[1])
    if error:
        await message.reply(f"‚ùó {error}")
        return

    banned_users.add(user_id)
    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} ({user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    log_message(message.from_user.id, f"/ban {parts[1]}", is_admin=True)


@dp.message_handler(commands=['unban'])
async def unban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /unban @username –∏–ª–∏ /unban user_id")
        return

    user_id, error = await resolve_user(parts[1])
    if error:
        await message.reply(f"‚ùó {error}")
        return

    banned_users.discard(user_id)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} ({user_id}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    log_message(message.from_user.id, f"/unban {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–æ—á–∏—Å—Ç–∏—Ç—å'])
async def clear_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—á–∏—Å—Ç–∏—Ç—å @username –∏–ª–∏ /–æ—á–∏—Å—Ç–∏—Ç—å user_id")
        return

    user_id, error = await resolve_user(parts[1])
    if error:
        await message.reply(f"‚ùó {error}")
        return

    try:
        chat_logs[user_id] = []
        filename = f"chat_logs/user_{user_id}.txt"
        if os.path.exists(filename):
            os.remove(filename)

        await delete_user_messages(user_id)

        await message.reply(f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {parts[1]} ({user_id}) –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    log_message(message.from_user.id, f"/–æ—á–∏—Å—Ç–∏—Ç—å {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–∏—Å—Ç–æ—Ä–∏—è'])
async def view_chat_history(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–∏—Å—Ç–æ—Ä–∏—è @username –∏–ª–∏ /–∏—Å—Ç–æ—Ä–∏—è user_id")
        return

    user_id, error = await resolve_user(parts[1])
    if error:
        await message.reply(f"‚ùó {error}")
        return

    history = load_chat_logs(user_id)
    if history:
        chunks = [history[i:i + 20] for i in range(0, len(history), 20)]
        for chunk in chunks:
            await message.answer("\n".join(chunk))
    else:
        await message.reply(f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å {parts[1]} ({user_id}) –ø—É—Å—Ç–∞.")

    log_message(message.from_user.id, f"/–∏—Å—Ç–æ—Ä–∏—è {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–æ–ø–ª–∞—Ç–∞'])
async def send_payment(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ–ø–ª–∞—Ç–∞ @username —Å—Å—ã–ª–∫–∞_–Ω–∞_–æ–ø–ª–∞—Ç—É")
        return

    user_id, error = await resolve_user(parts[1])
    if error:
        await message.reply(f"‚ùó {error}")
        return

    order_data = user_orders.get(user_id)
    if not order_data:
        await message.reply(f"‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {parts[1]} ({user_id}) –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{message.from_user.id}"
    payment_msg = f"""üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:

üîπ –¢–æ–≤–∞—Ä: {order_data['product']}
üîπ –ì—Ä–∞–º–º–æ–≤–∫–∞: {order_data['quantity']} –≥
üîπ –ö–∞—á–µ—Å—Ç–≤–æ: {'—É–ª—É—á—à–µ–Ω–Ω–æ–µ' if order_data['quality'] else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}
üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['price']}‚ÇΩ

üí∞ –†–µ–∫–≤–∏–∑–∏—Ç—ã/—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:
{parts[2]}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º."""

    try:
        await bot.send_message(user_id, payment_msg)
        await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {parts[1]} ({user_id})")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        if "bot was blocked by the user" in str(e).lower():
            error_msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        await message.reply(error_msg)

    log_message(message.from_user.id, f"/–æ–ø–ª–∞—Ç–∞ {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–æ—Ç–≤–µ—Ç'], content_types=types.ContentTypes.ANY)
async def reply_to_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    if message.text:
        parts = message.text.split(maxsplit=2)
    elif message.caption:
        parts = message.caption.split(maxsplit=2)
    else:
        await message.reply("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    if len(parts) < 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç @username —Ç–µ–∫—Å—Ç –ò–õ–ò /–æ—Ç–≤–µ—Ç user_id —Ç–µ–∫—Å—Ç")
        return

    target = parts[1]
    reply_text = parts[2] if len(parts) > 2 else None
    user_id, error = await resolve_user(target)

    if error:
        await message.reply(f"‚ùó {error}")
        return

    try:
        admin_reply_prefix = "üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"

        if message.photo:
            photo_caption = admin_reply_prefix + (reply_text if reply_text else "[—Ñ–æ—Ç–æ]")
            sent_msg = await bot.send_photo(
                user_id,
                message.photo[-1].file_id,
                caption=photo_caption
            )
            await message.reply(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} ({user_id})")
        elif reply_text:
            sent_msg = await bot.send_message(
                user_id,
                admin_reply_prefix + reply_text
            )
            await message.reply(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} ({user_id})")
        else:
            await message.reply("‚ùó –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)")
            return

        if user_id not in message_ids:
            message_ids[user_id] = []
        message_ids[user_id].append(sent_msg.message_id)

        update_unanswered_clients(user_id, is_admin_reply=True)

        if reply_text:
            log_message(user_id, f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞: {reply_text}", is_admin=True)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        if "bot was blocked by the user" in str(e).lower():
            error_msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        await message.reply(error_msg)


@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", state="*")
async def back_to_main(message: types.Message, state: FSMContext):
    if await check_banned(message.from_user.id):
        return

    log_message(message.from_user.id, "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
    await state.finish()
    await message.answer(format_welcome(), reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞", state="*")
async def show_photos(message: types.Message, state: FSMContext):
    if await check_banned(message.from_user.id):
        return

    current_state = await state.get_state()
    if current_state in [RulesState.waiting_for_accept.state]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞", reply_markup=rules_kb)
        return

    log_message(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤")
    kb = InlineKeyboardMarkup()
    for product in PHOTOS:
        kb.add(InlineKeyboardButton(text=product, callback_data=f"photo:{product}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await state.update_data(last_photo_id=None)


@dp.callback_query_handler(lambda c: c.data.startswith("photo:"), state="*")
async def send_product_photo(call: types.CallbackQuery, state: FSMContext):
    if await check_banned(call.from_user.id):
        await call.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return

    product = call.data.split(":")[1]
    photo_path = PHOTOS.get(product)

    data = await state.get_data()
    last_photo_id = data.get("last_photo_id")

    if last_photo_id:
        try:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=last_photo_id)
        except:
            pass

    if photo_path:
        sent = await call.message.answer_photo(InputFile(photo_path))
        await state.update_data(last_photo_id=sent.message_id)
    else:
        await call.message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    await call.answer()


@dp.message_handler(lambda m: m.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", state="*")
async def start_order(message: types.Message):
    if await check_banned(message.from_user.id):
        return

    current_state = await dp.current_state().get_state()
    if current_state in [RulesState.waiting_for_accept.state]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞", reply_markup=rules_kb)
        return

    log_message(message.from_user.id, "–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    kb = InlineKeyboardMarkup()
    for product in PRODUCTS:
        kb.add(InlineKeyboardButton(text=product, callback_data=f"order:{product}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await OrderState.waiting_for_product.set()


@dp.callback_query_handler(lambda c: c.data.startswith("order:"), state=OrderState.waiting_for_product)
async def choose_quantity(call: types.CallbackQuery, state: FSMContext):
    if await check_banned(call.from_user.id):
        await call.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return

    product = call.data.split(":")[1]
    await state.update_data(product=product)
    kb = InlineKeyboardMarkup()
    for qty in PRODUCTS[product]:
        kb.add(InlineKeyboardButton(text=f"{qty} –≥", callback_data=f"qty:{qty}"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=kb)
    await OrderState.waiting_for_quantity.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("qty:"), state=OrderState.waiting_for_quantity)
async def choose_quality(call: types.CallbackQuery, state: FSMContext):
    if await check_banned(call.from_user.id):
        await call.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return

    quantity = int(call.data.split(":")[1])
    await state.update_data(quantity=quantity)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞, —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (+10%)", callback_data="quality:yes"))
    kb.add(InlineKeyboardButton("–ù–µ—Ç, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", callback_data="quality:no"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=kb)
    await OrderState.waiting_for_quality.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("quality:"), state=OrderState.waiting_for_quality)
async def confirm_order(call: types.CallbackQuery, state: FSMContext):
    if await check_banned(call.from_user.id):
        await call.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return

    data = await state.get_data()
    quality = call.data.split(":")[1] == "yes"
    product = data['product']
    quantity = data['quantity']
    price = PRODUCTS[product][quantity]

    if quality:
        price = int(price * 1.1)

    await state.update_data(price=price, quality=quality)

    text = f"""<b>–í–∞—à –∑–∞–∫–∞–∑:</b>
–¢–æ–≤–∞—Ä: {product}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} –≥
–ö–∞—á–µ—Å—Ç–≤–æ: {"—É–ª—É—á—à–µ–Ω–Ω–æ–µ (+10%)" if quality else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"}
–¶–µ–Ω–∞: {price}‚ÇΩ

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"""

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"))
    kb.add(InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_order"))

    await call.message.answer(text, reply_markup=kb)
    await OrderState.confirming_order.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == "confirm_order", state=OrderState.confirming_order)
async def process_confirmation(call: types.CallbackQuery, state: FSMContext):
    if await check_banned(call.from_user.id):
        await call.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return

    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderState.waiting_for_comment.set()
    await call.answer()


@dp.message_handler(state=OrderState.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    if await check_banned(message.from_user.id):
        return

    comment = message.text
    data = await state.get_data()
    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"

    # Save order
    user_orders[user_id] = {
        'product': data['product'],
        'quantity': data['quantity'],
        'quality': data['quality'],
        'price': data['price'],
        'comment': comment,
        'timestamp': datetime.now().strftime("%d.%m.%y %H:%M:%S")
    }

    # Notify admin
    if ADMIN_ID:
        order_text = f"""üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {username} ({user_id}):
–¢–æ–≤–∞—Ä: {data['product']} {data['quantity']} –≥
–ö–∞—á–µ—Å—Ç–≤–æ: {"—É–ª—É—á—à–µ–Ω–Ω–æ–µ" if data['quality'] else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"}
–¶–µ–Ω–∞: {data['price']}‚ÇΩ
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"""

        await bot.send_message(ADMIN_ID, order_text)

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.", reply_markup=main_kb)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == "restart_order", state="*")
async def restart_order(call: types.CallbackQuery, state: FSMContext):
    if await check_banned(call.from_user.id):
        await call.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return

    await state.finish()
    await start_order(call.message)
    await call.answer()


@dp.message_handler(lambda m: m.text == "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", state="*")
async def contact_admin(message: types.Message):
    if await check_banned(message.from_user.id):
        return

    current_state = await dp.current_state().get_state()
    if current_state in [RulesState.waiting_for_accept.state]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞", reply_markup=rules_kb)
        return

    user_id = message.from_user.id
    username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"

    if message.from_user.username:
        username_to_id[f"@{message.from_user.username}"] = user_id

    user_contacting_admin[user_id] = username
    awaiting_admin_reply.add(user_id)

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", reply_markup=back_kb)
    log_message(user_id, "–ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º")


@dp.message_handler(content_types=types.ContentTypes.ANY, state="*")
async def handle_messages(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        return

    if await check_banned(message.from_user.id):
        return

    current_state = await dp.current_state().get_state()
    if current_state in [RulesState.waiting_for_accept.state]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞", reply_markup=rules_kb)
        return

    if message.from_user.id in awaiting_admin_reply:
        user_id = message.from_user.id
        username = f"@{message.from_user.username}" if message.from_user.username else f"ID:{user_id}"

        if user_id not in message_ids:
            message_ids[user_id] = []
        message_ids[user_id].append(message.message_id)

        if message.photo:
            photo = message.photo[-1]
            photo_name = await save_photo(photo, user_id)

            caption = f"üì∏ –§–æ—Ç–æ –æ—Ç {username} ({user_id})"
            if message.caption:
                caption += f"\n\n{message.caption}"

            sent_msg = await bot.send_photo(
                ADMIN_ID,
                photo.file_id,
                caption=caption
            )
            log_message(user_id, photo_name, is_photo=True)
            if message.caption:
                log_message(user_id, message.caption)
        elif message.text:
            sent_msg = await bot.send_message(
                ADMIN_ID,
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user_id}):\n{message.text}"
            )
            log_message(user_id, message.text)
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ")
            return

        update_unanswered_clients(user_id)

        sent_notification = await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        if user_id not in message_ids:
            message_ids[user_id] = []
        message_ids[user_id].append(sent_notification.message_id)

        awaiting_admin_reply.discard(user_id)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=main_kb)


if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # Load existing logs
    for filename in os.listdir('chat_logs'):
        if filename.startswith('user_') and filename.endswith('.txt'):
            user_id = int(filename[5:-4])
            chat_logs[user_id] = load_chat_logs(user_id)

    executor.start_polling(dp, skip_updates=True)