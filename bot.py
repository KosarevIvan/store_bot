import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from datetime import datetime
import pytz

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

banned_users = set()
user_contacting_admin = {}
awaiting_admin_reply = set()

class OrderState(StatesGroup):
    waiting_for_product = State()
    waiting_for_quantity = State()
    waiting_for_quality = State()
    confirming_order = State()
    waiting_for_comment = State()

PRODUCTS = {
    "–§–µ–¥—è": {1: 2790, 2: 4790, 3: 7990},
    "–ë–æ–±—ã": {1: 2190, 2: 2990, 3: 3990},
    "–ú–µ—Ç–∞–ª–ª": {1: 1490, 2: 2490, 3: 3490},
}

PHOTOS = {
    "–§–µ–¥—è": "data/photos/fedya.jpg",
    "–ë–æ–±—ã": "data/photos/boby.jpg",
    "–ú–µ—Ç–∞–ª–ª": "data/photos/metall.jpg",
}

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
main_kb.add("üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞", "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")

def get_time_stamp():
    msk_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(msk_tz)
    rounded = now.replace(minute=0 if now.minute < 30 else 30, second=0, microsecond=0)
    return rounded.strftime("%d.%m.%Y –≤ %H:%M")

def format_welcome():
    return f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω Elysium One ‚Äî –≥–¥–µ –∫–∞–∂–¥—ã–π –≥—Ä–∞–º–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º.
üç¨ –ù–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤:

<b>–§–µ–¥—è</b>
1–≥ ‚Äî 2 790‚ÇΩ
2–≥ ‚Äî 4 790‚ÇΩ (–≤—ã–≥–æ–¥–∞ 15%)
3–≥ ‚Äî 7 990‚ÇΩ (—Å–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

<b>–ë–æ–±—ã</b>
1–≥ ‚Äî 2 190‚ÇΩ
2–≥ ‚Äî 2 990‚ÇΩ (üìâ –≤—ã–≥–æ–¥–∞ 32%!)
3–≥ ‚Äî 3 990‚ÇΩ (üéÅ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä)

<b>–ú–µ—Ç–∞–ª–ª</b>
1–≥ ‚Äî 1 490‚ÇΩ
2–≥ ‚Äî 2 490‚ÇΩ (üí∞ –≤—ã–≥–æ–¥–∞ 17%)
3–≥ ‚Äî 3 490‚ÇΩ (üöÄ —Ç–æ–ø-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

üéØ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ–±–∞–≤–∏–≤ –≤—Å–µ–≥–æ 10% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.

–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –≥—Ä–∞–º–º–æ–≤–∫–∏ ‚Äî –º—ã –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å.

üìç –°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ, –ú–æ—Å–∫–≤–µ, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ, –ß–µ–ª—è–±–∏–Ω—Å–∫–µ, –ò—Ä–∫—É—Ç—Å–∫–µ –∏ –ö–∞–∑–∞–Ω–∏.

üìÖ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {get_time_stamp()} (–ø–æ –ú–°–ö)
üîí –í—Å–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞.
üöÄ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∫–ª–∞–¥ —É–∂–µ –∂–¥—ë—Ç –í–∞—Å –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.
–í–∞—à <b>Elysium One</b> ‚Äî –≥–¥–µ —Å–ª–∞–¥–æ—Å—Ç–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–º.
"""

@dp.message_handler(commands=['ban'])
async def ban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban user_id")
        return
    try:
        uid = int(parts[1])
        banned_users.add(uid)
        await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['unban'])
async def unban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /unban user_id")
        return
    try:
        uid = int(parts[1])
        banned_users.discard(uid)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['–æ—Ç–≤–µ—Ç'])
async def reply_to_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.reply("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç @username —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        username = parts[1].lstrip('@')
        text = parts[2]
        for uid, uname in user_contacting_admin.items():
            if uname == username:
                await bot.send_message(uid, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{text}")
                await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–∏—Å–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if message.from_user.id in banned_users:
        return
    await message.answer(format_welcome(), reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞")
async def photos_handler(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup()
    for name in PRODUCTS:
        kb.add(InlineKeyboardButton(name, callback_data=f"photo:{name}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await state.update_data(last_photo=None)

@dp.callback_query_handler(lambda c: c.data.startswith("photo:"))
async def send_photo(call: types.CallbackQuery, state: FSMContext):
    product = call.data.split(":")[1]
    photo_path = PHOTOS.get(product)

    data = await state.get_data()
    last_photo_id = data.get("last_photo")
    if last_photo_id:
        try:
            await bot.delete_message(call.message.chat.id, last_photo_id)
        except:
            pass

    if photo_path:
        sent = await call.message.answer_photo(InputFile(photo_path))
        await state.update_data(last_photo=sent.message_id)
    else:
        await call.message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await call.answer()

@dp.message_handler(lambda m: m.text == "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
async def contact_admin(message: types.Message):
    if message.from_user.id in banned_users:
        return
    user_contacting_admin[message.from_user.id] = message.from_user.username or f"id{message.from_user.id}"
    awaiting_admin_reply.add(message.from_user.id)
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:")

@dp.message_handler()
async def handle_admin_message(message: types.Message):
    if message.from_user.id in banned_users:
        return
    if message.from_user.id not in awaiting_admin_reply:
        return  # –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    username = message.from_user.username or f"id{message.from_user.id}"
    user_contacting_admin[message.from_user.id] = username
    msg = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (ID: {message.from_user.id}):\n{message.text}"
    await bot.send_message(ADMIN_ID, msg)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    awaiting_admin_reply.discard(message.from_user.id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
