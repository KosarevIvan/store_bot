import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

banned_users = set()

class OrderState(StatesGroup):
    waiting_for_product = State()
    waiting_for_quantity = State()
    waiting_for_quality = State()
    confirming_order = State()
    waiting_for_comment = State()

PRODUCTS = {
    "–§–µ–¥—è": {1: 2790, 2: 4790, 3: 7990},
    "–ë–æ–±—ã": {1: 2190, 2: 2990, 3: 3990},
    "–ú–µ—Ç–∞–ª–ª": {1: 1490, 2: 2490, 3: 3490},
}

PHOTOS = {
    "–§–µ–¥—è": "data/photos/fedya.jpg",
    "–ë–æ–±—ã": "data/photos/boby.jpg",
    "–ú–µ—Ç–∞–ª–ª": "data/photos/metall.jpg",
}

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
main_kb.add("üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞", "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")

def get_time_stamp():
    now = datetime.now()
    rounded = now.replace(minute=0 if now.minute < 30 else 30, second=0, microsecond=0)
    return rounded.strftime("%d.%m.%Y –≤ %H:%M")

def format_welcome():
    return f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω Elysium One ‚Äî –≥–¥–µ –∫–∞–∂–¥—ã–π –≥—Ä–∞–º–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º.
üç¨ –ù–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤:

<b>–§–µ–¥—è</b>
1–≥ ‚Äî 2 790‚ÇΩ
2–≥ ‚Äî 4 790‚ÇΩ (–≤—ã–≥–æ–¥–∞ 15%)
3–≥ ‚Äî 7 990‚ÇΩ (—Å–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

<b>–ë–æ–±—ã</b>
1–≥ ‚Äî 2 190‚ÇΩ
2–≥ ‚Äî 2 990‚ÇΩ (üìâ –≤—ã–≥–æ–¥–∞ 32%!)
3–≥ ‚Äî 3 990‚ÇΩ (üéÅ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä)

<b>–ú–µ—Ç–∞–ª–ª</b>
1–≥ ‚Äî 1 490‚ÇΩ
2–≥ ‚Äî 2 490‚ÇΩ (üí∞ –≤—ã–≥–æ–¥–∞ 17%)
3–≥ ‚Äî 3 490‚ÇΩ (üöÄ —Ç–æ–ø-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

üéØ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ–±–∞–≤–∏–≤ –≤—Å–µ–≥–æ 10% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.

–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –≥—Ä–∞–º–º–æ–≤–∫–∏ ‚Äî –º—ã –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å.

üìç –°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ, –ú–æ—Å–∫–≤–µ, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ, –ß–µ–ª—è–±–∏–Ω—Å–∫–µ, –ò—Ä–∫—É—Ç—Å–∫–µ –∏ –ö–∞–∑–∞–Ω–∏.

üìÖ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {get_time_stamp()}
üîí –í—Å–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞.
üöÄ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∫–ª–∞–¥ —É–∂–µ –∂–¥—ë—Ç –í–∞—Å –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.
–í–∞—à <b>Elysium One</b> ‚Äî –≥–¥–µ —Å–ª–∞–¥–æ—Å—Ç–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–º.
"""

@dp.message_handler(commands=['ban'])
async def ban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban user_id")
        return
    try:
        uid = int(parts[1])
        banned_users.add(uid)
        await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['unban'])
async def unban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /unban user_id")
        return
    try:
        uid = int(parts[1])
        banned_users.discard(uid)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if message.from_user.id in banned_users:
        return
    await message.answer(format_welcome(), parse_mode='HTML', reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞")
async def photos_handler(message: types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup()
    for name in PRODUCTS:
        kb.add(InlineKeyboardButton(name, callback_data=f"photo:{name}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await state.update_data(last_photo=None)

@dp.callback_query_handler(lambda c: c.data.startswith("photo:"))
async def send_photo(call: types.CallbackQuery, state: FSMContext):
    product = call.data.split(":")[1]
    photo_path = PHOTOS.get(product)

    data = await state.get_data()
    last_photo_id = data.get("last_photo")
    if last_photo_id:
        try:
            await bot.delete_message(call.message.chat.id, last_photo_id)
        except:
            pass

    if photo_path:
        sent = await call.message.answer_photo(InputFile(photo_path))
        await state.update_data(last_photo=sent.message_id)
    else:
        await call.message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("order:"), state=OrderState.waiting_for_product)
async def choose_quantity(call: types.CallbackQuery, state: FSMContext):
    product = call.data.split(":")[1]
    await state.update_data(product=product)
    kb = InlineKeyboardMarkup()
    for qty in PRODUCTS[product]:
        kb.add(InlineKeyboardButton(f"{qty} –≥", callback_data=f"qty:{qty}"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫—É:", reply_markup=kb)
    await OrderState.waiting_for_quantity.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("qty:"), state=OrderState.waiting_for_quantity)
async def choose_quality(call: types.CallbackQuery, state: FSMContext):
    qty = int(call.data.split(":")[1])
    await state.update_data(quantity=qty)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –î–∞, —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ (+10%)", callback_data="quality:yes"))
    kb.add(InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="quality:no"))
    await call.message.answer("–î–æ–±–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞ +10%?", reply_markup=kb)
    await OrderState.waiting_for_quality.set()
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("quality:"), state=OrderState.waiting_for_quality)
async def confirm_order(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    quality = call.data.split(":")[1] == "yes"
    product, qty = data['product'], data['quantity']
    price = PRODUCTS[product][qty]
    if quality:
        price = int(price * 1.1)

    text = f"<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n–¢–æ–≤–∞—Ä: {product}\n–ì—Ä–∞–º–º–æ–≤–∫–∞: {qty} –≥\n–ö–∞—á–µ—Å—Ç–≤–æ: {'–£–ª—É—á—à–µ–Ω–Ω–æ–µ (+10%)' if quality else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}\n\n<b>–ò—Ç–æ–≥–æ: {price}‚ÇΩ</b>\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'."
    await state.update_data(price=price, quality=quality)
    await call.message.answer(text, parse_mode='HTML')
    await OrderState.confirming_order.set()
    await call.answer()

@dp.message_handler(lambda m: m.text.lower() == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", state=OrderState.confirming_order)
async def finish_order(message: types.Message, state: FSMContext):
    await message.answer("üìç –£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω")
    await OrderState.waiting_for_comment.set()

@dp.message_handler(state=OrderState.waiting_for_comment)
async def receive_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username
    user_ref = f"@{username}" if username else f"ID: {user_id}"
    order_text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user_ref} (ID: {user_id}):\n" \
                 f"–¢–æ–≤–∞—Ä: {data['product']}\n–ì—Ä–∞–º–º–æ–≤–∫–∞: {data['quantity']} –≥\n–ö–∞—á–µ—Å—Ç–≤–æ: {'–£–ª—É—á—à–µ–Ω–Ω–æ–µ' if data['quality'] else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}\n–¶–µ–Ω–∞: {data['price']}‚ÇΩ\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    if ADMIN_ID:
        await bot.send_message(ADMIN_ID, order_text)
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", reply_markup=main_kb)
    await state.finish()

@dp.message_handler()
async def relay_to_admin(message: types.Message):
    if message.from_user.id == ADMIN_ID and message.text.startswith("/–æ—Ç–≤–µ—Ç"):
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç user_id —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        target = parts[1]
        response = parts[2]

        if target.startswith("@"):  # –æ—Ç–≤–µ—Ç –ø–æ username –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Telegram API
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ username. –ò—Å–ø–æ–ª—å–∑—É–π user_id.")
            return

        try:
            await bot.send_message(target, f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{response}")
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    else:
        username = message.from_user.username
        user_ref = f"@{username}" if username else f"ID: {message.from_user.id}"
        if ADMIN_ID:
            await bot.send_message(ADMIN_ID, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_ref} (ID: {message.from_user.id}): {message.text}")
            await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)