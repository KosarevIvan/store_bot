import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from datetime import datetime
import pytz
import json
import os.path
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
banned_users = set()
user_contacting_admin = {}  # user_id: username
username_to_id = {}  # username: user_id
awaiting_admin_reply = set()
user_orders = {}  # user_id: order_data
chat_logs = {}  # user_id: [messages]

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if not os.path.exists('chat_logs'):
    os.makedirs('chat_logs')
if not os.path.exists('chat_logs/photos'):
    os.makedirs('chat_logs/photos')


class OrderState(StatesGroup):
    waiting_for_product = State()
    waiting_for_quantity = State()
    waiting_for_quality = State()
    confirming_order = State()
    waiting_for_comment = State()


PRODUCTS = {
    "–§–µ–¥—è": {1: 2790, 2: 4790, 3: 7990},
    "–ë–æ–±—ã": {1: 2190, 2: 2990, 3: 3990},
    "–ú–µ—Ç–∞–ª–ª": {1: 1490, 2: 2490, 3: 3490},
}

PHOTOS = {
    "–§–µ–¥—è": "data/photos/fedya.jpg",
    "–ë–æ–±—ã": "data/photos/boby.jpg",
    "–ú–µ—Ç–∞–ª–ª": "data/photos/metall.jpg",
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
main_kb.add("üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞", "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")

back_kb = ReplyKeyboardMarkup(resize_keyboard=True)
back_kb.add("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_time_stamp():
    msk_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(msk_tz)
    return now.strftime("%d.%m.%y %H:%M:%S")


def format_welcome():
    return f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω Elysium One ‚Äî –≥–¥–µ –∫–∞–∂–¥—ã–π –≥—Ä–∞–º–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º.
üç¨ –ù–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤:

<b>–§–µ–¥—è</b>
1–≥ ‚Äî 2 790‚ÇΩ
2–≥ ‚Äî 4 790‚ÇΩ (–≤—ã–≥–æ–¥–∞ 15%)
3–≥ ‚Äî 7 990‚ÇΩ (—Å–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

<b>–ë–æ–±—ã</b>
1–≥ ‚Äî 2 190‚ÇΩ
2–≥ ‚Äî 2 990‚ÇΩ (üìâ –≤—ã–≥–æ–¥–∞ 32%!)
3–≥ ‚Äî 3 990‚ÇΩ (üéÅ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä)

<b>–ú–µ—Ç–∞–ª–ª</b>
1–≥ ‚Äî 1 490‚ÇΩ
2–≥ ‚Äî 2 490‚ÇΩ (üí∞ –≤—ã–≥–æ–¥–∞ 17%)
3–≥ ‚Äî 3 490‚ÇΩ (üöÄ —Ç–æ–ø-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

üéØ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –¥–æ–±–∞–≤–∏–≤ –≤—Å–µ–≥–æ 10% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.

–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—Ä—É–≥–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –≥—Ä–∞–º–º–æ–≤–∫–∏ ‚Äî –º—ã –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –í–∞—Å.

üìç –°–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ, –ú–æ—Å–∫–≤–µ, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ, –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ, –ß–µ–ª—è–±–∏–Ω—Å–∫–µ, –ò—Ä–∫—É—Ç—Å–∫–µ –∏ –ö–∞–∑–∞–Ω–∏.

üìÖ –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {get_time_stamp()} (–ø–æ –ú–°–ö)
üîí –í—Å–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø—Ä–æ—Ö–æ–¥—è—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞.
üöÄ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∫–ª–∞–¥ —É–∂–µ –∂–¥—ë—Ç –í–∞—Å –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.
–í–∞—à <b>Elysium One</b> ‚Äî –≥–¥–µ —Å–ª–∞–¥–æ—Å—Ç–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–º.
"""


async def save_photo(photo: types.PhotoSize, user_id: int) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_ext = photo.file_unique_id[-4:]  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
    filename = f"{user_id}_{uuid.uuid4().hex[:8]}_{file_ext}.jpg"
    file_path = f"chat_logs/photos/{filename}"

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await photo.download(destination_file=file_path)
    return filename


def log_message(user_id: int, message: str, is_admin: bool = False, is_photo: bool = False):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    if user_id not in chat_logs:
        chat_logs[user_id] = []

    timestamp = datetime.now().strftime("%d.%m.%y %H:%M:%S")
    username = "admin" if is_admin else f"{username_to_id.get(f'@{user_id}', 'user')}({user_id})"

    if is_photo:
        log_entry = f"{timestamp} @{username}: [—Ñ–æ—Ç–æ_{message}]"
    else:
        log_entry = f"{timestamp} @{username}: {message}"

    chat_logs[user_id].append(log_entry)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    filename = f"chat_logs/user_{user_id}.txt"
    try:
        with open(filename, 'a', encoding='utf-8') as f:
            f.write(log_entry + "\n")
    except Exception as e:
        logging.error(f"Error saving chat log: {e}")


def load_chat_logs(user_id: int):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    filename = f"chat_logs/user_{user_id}.txt"
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return f.read().splitlines()
        except Exception as e:
            logging.error(f"Error loading chat log: {e}")
    return []


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if message.from_user.id in banned_users:
        return
    log_message(message.from_user.id, "/start")
    await message.answer(format_welcome(), reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main(message: types.Message):
    log_message(message.from_user.id, "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
    await message.answer(format_welcome(), reply_markup=main_kb)


@dp.message_handler(commands=['ban'])
async def ban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban user_id –∏–ª–∏ /ban @username")
        return
    arg = parts[1]
    if arg.startswith("@"):  # –±–∞–Ω –ø–æ –Ω–∏–∫—É
        uid = username_to_id.get(arg)
        if uid:
            banned_users.add(uid)
            await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {arg} ({uid}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        try:
            uid = int(arg)
            banned_users.add(uid)
            await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except:
            await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
    log_message(message.from_user.id, f"/ban {arg}", is_admin=True)


@dp.message_handler(commands=['unban'])
async def unban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /unban user_id")
        return
    try:
        uid = int(parts[1])
        banned_users.discard(uid)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except:
        await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
    log_message(message.from_user.id, f"/unban {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–æ—á–∏—Å—Ç–∏—Ç—å'])
async def clear_chat(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—á–∏—Å—Ç–∏—Ç—å @username –∏–ª–∏ /–æ—á–∏—Å—Ç–∏—Ç—å user_id")
        return

    target = parts[1]
    user_id = None

    if target.startswith("@"):
        user_id = username_to_id.get(target)
    else:
        try:
            user_id = int(target)
        except ValueError:
            pass

    if user_id:
        try:
            # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
            chat_logs[user_id] = []
            filename = f"chat_logs/user_{user_id}.txt"
            if os.path.exists(filename):
                os.remove(filename)

            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            photo_dir = f"chat_logs/photos/"
            for photo_file in os.listdir(photo_dir):
                if photo_file.startswith(f"{user_id}_"):
                    os.remove(os.path.join(photo_dir, photo_file))

            await message.reply(f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target} –æ—á–∏—â–µ–Ω. –õ–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {str(e)}")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    log_message(message.from_user.id, f"/–æ—á–∏—Å—Ç–∏—Ç—å {target}", is_admin=True)


@dp.message_handler(commands=['–∏—Å—Ç–æ—Ä–∏—è'])
async def view_chat_history(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–∏—Å—Ç–æ—Ä–∏—è @username –∏–ª–∏ /–∏—Å—Ç–æ—Ä–∏—è user_id")
        return

    target = parts[1]
    user_id = None

    if target.startswith("@"):
        user_id = username_to_id.get(target)
    else:
        try:
            user_id = int(target)
        except ValueError:
            pass

    if user_id:
        history = load_chat_logs(user_id)
        if history:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –±–æ–ª—å—à–∞—è
            chunks = [history[i:i + 20] for i in range(0, len(history), 20)]
            for chunk in chunks:
                text = f"üìù –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å {target} (ID: {user_id}):\n\n" + "\n".join(chunk)
                await message.answer(text)
        else:
            await message.reply(f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å {target} –ø—É—Å—Ç–∞.")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    log_message(message.from_user.id, f"/–∏—Å—Ç–æ—Ä–∏—è {target}", is_admin=True)


@dp.message_handler(commands=['–æ–ø–ª–∞—Ç–∞'])
async def send_payment(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ–ø–ª–∞—Ç–∞ @username —Å—Å—ã–ª–∫–∞_–Ω–∞_–æ–ø–ª–∞—Ç—É")
        return

    target = parts[1]
    payment_link = parts[2]
    user_id = None

    if target.startswith("@"):
        user_id = username_to_id.get(target)
    else:
        try:
            user_id = int(target)
        except ValueError:
            pass

    if user_id:
        order_data = user_orders.get(user_id)
        if order_data:
            payment_message = f"""üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:

üîπ –¢–æ–≤–∞—Ä: {order_data['product']}
üîπ –ì—Ä–∞–º–º–æ–≤–∫–∞: {order_data['quantity']} –≥
üîπ –ö–∞—á–µ—Å—Ç–≤–æ: {'—É–ª—É—á—à–µ–Ω–Ω–æ–µ' if order_data['quality'] else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}
üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['price']}‚ÇΩ

üí∞ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
{payment_link}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –¥–æ—Å—Ç–∞–≤–∫–µ.

üöÄ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!
–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ —Å—é–¥–∞."""

            try:
                await bot.send_message(user_id, payment_message)
                await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target}")
            except Exception as e:
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        else:
            await message.reply("‚ùó –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    log_message(message.from_user.id, f"/–æ–ø–ª–∞—Ç–∞ {target}", is_admin=True)


@dp.message_handler(lambda m: m.text == "üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞")
async def show_photos(message: types.Message, state: FSMContext):
    log_message(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ")
    kb = InlineKeyboardMarkup()
    for product in PHOTOS:
        kb.add(InlineKeyboardButton(text=product, callback_data=f"photo:{product}"))
    await message.answer("üì∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ:", reply_markup=kb)
    await state.update_data(last_photo_id=None)


@dp.callback_query_handler(lambda c: c.data.startswith("photo:"))
async def send_photo(call: types.CallbackQuery, state: FSMContext):
    product = call.data.split(":")[1]
    photo_path = PHOTOS.get(product)

    data = await state.get_data()
    last_photo_id = data.get("last_photo")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if last_photo_id:
        try:
            await bot.delete_message(call.message.chat.id, last_photo_id)
        except:
            pass

    if photo_path:
        sent = await call.message.answer_photo(InputFile(photo_path))
        await state.update_data(last_photo=sent.message_id)
    else:
        await call.message.answer("‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await call.answer()


@dp.message_handler(lambda m: m.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message):
    log_message(message.from_user.id, "–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    kb = InlineKeyboardMarkup()
    for product in PRODUCTS:
        kb.add(InlineKeyboardButton(text=product, callback_data=f"order:{product}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await OrderState.waiting_for_product.set()


@dp.callback_query_handler(lambda c: c.data.startswith("order:"), state=OrderState.waiting_for_product)
async def choose_quantity(call: types.CallbackQuery, state: FSMContext):
    product = call.data.split(":")[1]
    await state.update_data(product=product)
    kb = InlineKeyboardMarkup()
    for qty in PRODUCTS[product]:
        kb.add(InlineKeyboardButton(text=f"{qty} –≥", callback_data=f"qty:{qty}"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫—É:", reply_markup=kb)
    await OrderState.waiting_for_quantity.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("qty:"), state=OrderState.waiting_for_quantity)
async def choose_quality(call: types.CallbackQuery, state: FSMContext):
    quantity = int(call.data.split(":")[1])
    await state.update_data(quantity=quantity)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞, —Ö–æ—á—É —É–ª—É—á—à–µ–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="quality:yes"))
    kb.add(InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="quality:no"))
    await call.message.answer("–î–æ–±–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞ +10%?", reply_markup=kb)
    await OrderState.waiting_for_quality.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("quality:"), state=OrderState.waiting_for_quality)
async def confirm_order(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    quality = call.data.split(":")[1] == "yes"
    product, qty = data['product'], data['quantity']
    price = PRODUCTS[product][qty]
    if quality:
        price = int(price * 1.1)
    await state.update_data(quality=quality, price=price)
    text = f"<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n–¢–æ–≤–∞—Ä: {product}\n–ì—Ä–∞–º–º–æ–≤–∫–∞: {qty} –≥\n–ö–∞—á–µ—Å—Ç–≤–æ: {'–£–ª—É—á—à–µ–Ω–Ω–æ–µ (+10%)' if quality else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}\n\n<b>–ò—Ç–æ–≥–æ: {price}‚ÇΩ</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑."
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm"))
    kb.add(InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="restart"))
    await call.message.answer(text, reply_markup=kb)
    await OrderState.confirming_order.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == "confirm", state=OrderState.confirming_order)
async def ask_comment(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        "üìç –£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω")
    await OrderState.waiting_for_comment.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == "restart", state="*")
async def restart_order(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await start_order(call.message)
    await call.answer()


@dp.message_handler(state=OrderState.waiting_for_comment)
async def finish_order(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    username = message.from_user.username
    user_ref = f"@{username}" if username else f"ID: {user_id}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    user_orders[user_id] = {
        'product': data['product'],
        'quantity': data['quantity'],
        'quality': data['quality'],
        'price': data['price'],
        'comment': comment,
        'timestamp': datetime.now().strftime("%d.%m.%y %H:%M:%S")
    }

    order_text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user_ref} (ID: {user_id}):\n" \
                 f"–¢–æ–≤–∞—Ä: {data['product']}\n–ì—Ä–∞–º–º–æ–≤–∫–∞: {data['quantity']} –≥\n" \
                 f"–ö–∞—á–µ—Å—Ç–≤–æ: {'–£–ª—É—á—à–µ–Ω–Ω–æ–µ' if data['quality'] else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}\n–¶–µ–Ω–∞: {data['price']}‚ÇΩ\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"

    if ADMIN_ID:
        await bot.send_message(ADMIN_ID, order_text)

    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", reply_markup=main_kb)
    await state.finish()
    log_message(user_id, f"–û—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑: {order_text}")


@dp.message_handler(lambda m: m.text == "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
async def contact_admin(message: types.Message):
    if message.from_user.id in banned_users:
        return
    user_contacting_admin[message.from_user.id] = message.from_user.username or ""
    username_to_id[f"@{message.from_user.username}"] = message.from_user.id
    awaiting_admin_reply.add(message.from_user.id)
    await message.answer(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–º–µ–π—Ç–µ –≤–≤–∏–¥—É, —á—Ç–æ —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏",
        reply_markup=back_kb)
    log_message(message.from_user.id, "–ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º")


@dp.message_handler(content_types=['text', 'photo'])
async def handle_message(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        if message.text and message.text.startswith("/–æ—Ç–≤–µ—Ç"):
            parts = message.text.split(maxsplit=2)
            if len(parts) < 3:
                await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç @username —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return
            recipient = parts[1]
            reply = parts[2]
            uid = username_to_id.get(recipient)
            if uid:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —É –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    async for msg in bot.iter_history(uid, limit=10):
                        if msg.text == "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.":
                            await bot.delete_message(uid, msg.message_id)
                            break
                except:
                    pass

                await bot.send_message(uid, f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply}")
                await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                log_message(uid, f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞: {reply}", is_admin=True)
            else:
                await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        if message.text and not message.text.startswith("/"):
            log_message(message.from_user.id, message.text, is_admin=True)

    if message.from_user.id in awaiting_admin_reply:
        text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {message.from_user.id}):"
        if message.photo:
            photo = message.photo[-1]
            photo_filename = await save_photo(photo, message.from_user.id)
            await bot.send_photo(ADMIN_ID, photo.file_id, caption=text)
            log_message(message.from_user.id, photo_filename, is_photo=True)
        else:
            await bot.send_message(ADMIN_ID, f"{text}\n{message.text}")
            log_message(message.from_user.id, message.text)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        awaiting_admin_reply.discard(message.from_user.id)
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ ‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.")


if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    for filename in os.listdir('chat_logs'):
        if filename.startswith('user_') and filename.endswith('.txt'):
            user_id = int(filename[5:-4])
            chat_logs[user_id] = load_chat_logs(user_id)

    executor.start_polling(dp, skip_updates=True)