import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from datetime import datetime
import pytz
import json
import os.path
import uuid

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

# Data structures
banned_users = set()
user_contacting_admin = {}
username_to_id = {}
awaiting_admin_reply = set()
user_orders = {}
chat_logs = {}

# Create directories
os.makedirs('chat_logs', exist_ok=True)
os.makedirs('chat_logs/photos', exist_ok=True)


class OrderState(StatesGroup):
    waiting_for_product = State()
    waiting_for_quantity = State()
    waiting_for_quality = State()
    confirming_order = State()
    waiting_for_comment = State()


# Products and photos configuration
PRODUCTS = {
    "–§–µ–¥—è": {1: 2790, 2: 4790, 3: 7990},
    "–ë–æ–±—ã": {1: 2190, 2: 2990, 3: 3990},
    "–ú–µ—Ç–∞–ª–ª": {1: 1490, 2: 2490, 3: 3490},
}

PHOTOS = {
    "–§–µ–¥—è": "data/photos/fedya.jpg",
    "–ë–æ–±—ã": "data/photos/boby.jpg",
    "–ú–µ—Ç–∞–ª–ª": "data/photos/metall.jpg",
}

# Keyboards
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
main_kb.add("üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞", "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")

back_kb = ReplyKeyboardMarkup(resize_keyboard=True)
back_kb.add("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")


# Helper functions
def get_time_stamp():
    msk_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(msk_tz)
    return now.strftime("%d.%m.%y %H:%M:%S")


async def save_photo(photo: types.PhotoSize, user_id: int) -> str:
    """Save photo to disk and return filename"""
    file_ext = photo.file_unique_id[-4:]
    filename = f"{user_id}_{uuid.uuid4().hex[:8]}_{file_ext}.jpg"
    file_path = f"chat_logs/photos/{filename}"
    await photo.download(destination_file=file_path)
    return filename


def log_message(user_id: int, message: str, is_admin: bool = False, is_photo: bool = False):
    """Log message to chat history"""
    if user_id not in chat_logs:
        chat_logs[user_id] = []

    timestamp = get_time_stamp()
    username = "admin" if is_admin else f"{username_to_id.get(f'@{user_id}', 'user')}({user_id})"

    if is_photo:
        log_entry = f"{timestamp} @{username}: [—Ñ–æ—Ç–æ_{message}]"
    else:
        log_entry = f"{timestamp} @{username}: {message}"

    chat_logs[user_id].append(log_entry)

    # Save to file
    filename = f"chat_logs/user_{user_id}.txt"
    try:
        with open(filename, 'a', encoding='utf-8') as f:
            f.write(log_entry + "\n")
    except Exception as e:
        logging.error(f"Error saving chat log: {e}")


def load_chat_logs(user_id: int):
    """Load chat history from file"""
    filename = f"chat_logs/user_{user_id}.txt"
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return f.read().splitlines()
        except Exception as e:
            logging.error(f"Error loading chat log: {e}")
    return []


async def delete_user_messages(user_id: int):
    """Delete all messages from bot to user"""
    try:
        async for msg in bot.iter_history(user_id, limit=100):
            if msg.from_user.id == int(BOT_TOKEN.split(':')[0]):
                await bot.delete_message(user_id, msg.message_id)
    except Exception as e:
        logging.error(f"Error deleting messages: {e}")


async def resolve_user_id(target: str) -> int:
    """Resolve user ID from username or ID string"""
    if target.startswith("@"):
        return username_to_id.get(target)
    try:
        return int(target)
    except ValueError:
        return None


# New command to send photo from logs
@dp.message_handler(commands=['—Ñ–æ—Ç–æ'])
async def send_photo_from_logs(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /—Ñ–æ—Ç–æ id_—Ñ–æ—Ç–æ")
        return

    photo_id = parts[1]
    photo_path = f"chat_logs/photos/{photo_id}"

    if os.path.exists(photo_path):
        try:
            await message.reply_photo(InputFile(photo_path))
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
    else:
        await message.reply("‚ùó –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")


# Admin commands
@dp.message_handler(commands=['ban'])
async def ban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /ban user_id –∏–ª–∏ /ban @username")
        return

    user_id = await resolve_user_id(parts[1])
    if user_id:
        banned_users.add(user_id)
        await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    log_message(message.from_user.id, f"/ban {parts[1]}", is_admin=True)


@dp.message_handler(commands=['unban'])
async def unban_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /unban user_id –∏–ª–∏ /unban @username")
        return

    user_id = await resolve_user_id(parts[1])
    if user_id:
        banned_users.discard(user_id)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {parts[1]} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    log_message(message.from_user.id, f"/unban {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–æ—á–∏—Å—Ç–∏—Ç—å'])
async def clear_chat(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—á–∏—Å—Ç–∏—Ç—å @username –∏–ª–∏ /–æ—á–∏—Å—Ç–∏—Ç—å user_id")
        return

    user_id = await resolve_user_id(parts[1])
    if user_id:
        try:
            # Clear logs
            chat_logs[user_id] = []
            filename = f"chat_logs/user_{user_id}.txt"
            if os.path.exists(filename):
                os.remove(filename)

            # Delete user messages
            await delete_user_messages(user_id)

            await message.reply(f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {parts[1]} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    log_message(message.from_user.id, f"/–æ—á–∏—Å—Ç–∏—Ç—å {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–∏—Å—Ç–æ—Ä–∏—è'])
async def view_chat_history(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–∏—Å—Ç–æ—Ä–∏—è @username –∏–ª–∏ /–∏—Å—Ç–æ—Ä–∏—è user_id")
        return

    user_id = await resolve_user_id(parts[1])
    if user_id:
        history = load_chat_logs(user_id)
        if history:
            chunks = [history[i:i + 20] for i in range(0, len(history), 20)]
            for chunk in chunks:
                await message.answer("\n".join(chunk))
        else:
            await message.reply("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—É—Å—Ç–∞.")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    log_message(message.from_user.id, f"/–∏—Å—Ç–æ—Ä–∏—è {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–æ–ø–ª–∞—Ç–∞'])
async def send_payment(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ–ø–ª–∞—Ç–∞ @username —Å—Å—ã–ª–∫–∞_–Ω–∞_–æ–ø–ª–∞—Ç—É")
        return

    user_id = await resolve_user_id(parts[1])
    if user_id:
        order_data = user_orders.get(user_id)
        if order_data:
            payment_msg = f"""üí≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:

üîπ –¢–æ–≤–∞—Ä: {order_data['product']}
üîπ –ì—Ä–∞–º–º–æ–≤–∫–∞: {order_data['quantity']} –≥
üîπ –ö–∞—á–µ—Å—Ç–≤–æ: {'—É–ª—É—á—à–µ–Ω–Ω–æ–µ' if order_data['quality'] else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'}
üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['price']}‚ÇΩ

üí∞ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
{parts[2]}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç."""

            try:
                await bot.send_message(user_id, payment_msg)
                await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {parts[1]}")
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            await message.reply("‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    log_message(message.from_user.id, f"/–æ–ø–ª–∞—Ç–∞ {parts[1]}", is_admin=True)


@dp.message_handler(commands=['–æ—Ç–≤–µ—Ç'])
async def reply_to_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /–æ—Ç–≤–µ—Ç @username —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    user_id = await resolve_user_id(parts[1])
    if user_id:
        try:
            # Delete bot's "message sent" notification
            async for msg in bot.iter_history(user_id, limit=10):
                if msg.text == "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.":
                    await bot.delete_message(user_id, msg.message_id)
                    break

            await bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{parts[2]}")
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            log_message(user_id, f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞: {parts[2]}", is_admin=True)
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    else:
        await message.reply("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    if message.from_user.id in banned_users:
        return
    log_message(message.from_user.id, "/start")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main(message: types.Message):
    log_message(message.from_user.id, "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "üì¶ –§–æ—Ç–æ —Å–æ —Å–∫–ª–∞–¥–∞")
async def show_photos(message: types.Message, state: FSMContext):
    log_message(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤")
    kb = InlineKeyboardMarkup()
    for product in PHOTOS:
        kb.add(InlineKeyboardButton(text=product, callback_data=f"photo:{product}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await state.update_data(last_photo_id=None)


@dp.callback_query_handler(lambda c: c.data.startswith("photo:"))
async def send_product_photo(call: types.CallbackQuery, state: FSMContext):
    product = call.data.split(":")[1]
    photo_path = PHOTOS.get(product)

    data = await state.get_data()
    last_photo_id = data.get("last_photo")

    if last_photo_id:
        try:
            await bot.delete_message(call.message.chat.id, last_photo_id)
        except:
            pass

    if photo_path:
        sent = await call.message.answer_photo(InputFile(photo_path))
        await state.update_data(last_photo=sent.message_id)
    else:
        await call.message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    await call.answer()


@dp.message_handler(lambda m: m.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message):
    log_message(message.from_user.id, "–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    kb = InlineKeyboardMarkup()
    for product in PRODUCTS:
        kb.add(InlineKeyboardButton(text=product, callback_data=f"order:{product}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
    await OrderState.waiting_for_product.set()


@dp.callback_query_handler(lambda c: c.data.startswith("order:"), state=OrderState.waiting_for_product)
async def choose_quantity(call: types.CallbackQuery, state: FSMContext):
    product = call.data.split(":")[1]
    await state.update_data(product=product)
    kb = InlineKeyboardMarkup()
    for qty in PRODUCTS[product]:
        kb.add(InlineKeyboardButton(text=f"{qty} –≥", callback_data=f"qty:{qty}"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=kb)
    await OrderState.waiting_for_quantity.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("qty:"), state=OrderState.waiting_for_quantity)
async def choose_quality(call: types.CallbackQuery, state: FSMContext):
    quantity = int(call.data.split(":")[1])
    await state.update_data(quantity=quantity)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞, —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (+10%)", callback_data="quality:yes"))
    kb.add(InlineKeyboardButton("–ù–µ—Ç, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", callback_data="quality:no"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=kb)
    await OrderState.waiting_for_quality.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("quality:"), state=OrderState.waiting_for_quality)
async def confirm_order(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    quality = call.data.split(":")[1] == "yes"
    product = data['product']
    quantity = data['quantity']
    price = PRODUCTS[product][quantity]

    if quality:
        price = int(price * 1.1)

    await state.update_data(price=price, quality=quality)

    text = f"""<b>–í–∞—à –∑–∞–∫–∞–∑:</b>
–¢–æ–≤–∞—Ä: {product}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} –≥
–ö–∞—á–µ—Å—Ç–≤–æ: {"—É–ª—É—á—à–µ–Ω–Ω–æ–µ (+10%)" if quality else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"}
–¶–µ–Ω–∞: {price}‚ÇΩ

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"""

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"))
    kb.add(InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart_order"))

    await call.message.answer(text, reply_markup=kb)
    await OrderState.confirming_order.set()
    await call.answer()


@dp.callback_query_handler(lambda c: c.data == "confirm_order", state=OrderState.confirming_order)
async def process_confirmation(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderState.waiting_for_comment.set()
    await call.answer()


@dp.message_handler(state=OrderState.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text
    data = await state.get_data()

    # Save order
    user_id = message.from_user.id
    user_orders[user_id] = {
        'product': data['product'],
        'quantity': data['quantity'],
        'quality': data['quality'],
        'price': data['price'],
        'comment': comment,
        'timestamp': datetime.now().strftime("%d.%m.%y %H:%M:%S")
    }

    # Notify admin
    if ADMIN_ID:
        order_text = f"""üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}
–¢–æ–≤–∞—Ä: {data['product']} {data['quantity']} –≥
–ö–∞—á–µ—Å—Ç–≤–æ: {"—É–ª—É—á—à–µ–Ω–Ω–æ–µ" if data['quality'] else "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"}
–¶–µ–Ω–∞: {data['price']}‚ÇΩ
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"""

        await bot.send_message(ADMIN_ID, order_text)

    await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.", reply_markup=main_kb)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == "restart_order", state="*")
async def restart_order(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await start_order(call.message)
    await call.answer()


@dp.message_handler(lambda m: m.text == "üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
async def contact_admin(message: types.Message):
    if message.from_user.id in banned_users:
        return

    user_contacting_admin[message.from_user.id] = message.from_user.username or ""
    username_to_id[f"@{message.from_user.username}"] = message.from_user.id
    awaiting_admin_reply.add(message.from_user.id)

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", reply_markup=back_kb)
    log_message(message.from_user.id, "–ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º")


@dp.message_handler(content_types=['text', 'photo'])
async def handle_messages(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        # Handle admin replies
        if message.text and message.text.startswith("/–æ—Ç–≤–µ—Ç"):
            parts = message.text.split(maxsplit=2)
            if len(parts) < 3:
                await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–æ—Ç–≤–µ—Ç @username —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            user_id = await resolve_user_id(parts[1])
            if user_id:
                try:
                    # Delete "message sent" notification
                    async for msg in bot.iter_history(user_id, limit=10):
                        if msg.text == "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.":
                            await bot.delete_message(user_id, msg.message_id)
                            break

                    await bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{parts[2]}")
                    await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                    log_message(user_id, f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞: {parts[2]}", is_admin=True)
                except Exception as e:
                    await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")
            else:
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

    if message.from_user.id in awaiting_admin_reply:
        if message.photo:
            photo = message.photo[-1]
            photo_name = await save_photo(photo, message.from_user.id)
            await bot.send_photo(
                ADMIN_ID,
                photo.file_id,
                caption=f"üì∏ –§–æ—Ç–æ –æ—Ç @{message.from_user.username or message.from_user.id}"
            )
            log_message(message.from_user.id, photo_name, is_photo=True)
        else:
            await bot.send_message(
                ADMIN_ID,
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.id}:\n{message.text}"
            )
            log_message(message.from_user.id, message.text)

        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        awaiting_admin_reply.discard(message.from_user.id)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=main_kb)


if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # Load existing logs
    for filename in os.listdir('chat_logs'):
        if filename.startswith('user_') and filename.endswith('.txt'):
            user_id = int(filename[5:-4])
            chat_logs[user_id] = load_chat_logs(user_id)

    executor.start_polling(dp, skip_updates=True)